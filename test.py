# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16YFoAU6A0YGp-Awcdgv1-as5K29BwRng
"""

### Problem 1: Add two numbers

## Let's start off with a simple one. Write a Python function that adds two numbers.
def add_numbers(a, b):
  return a + b
print(add_numbers(2, 9))

### Problem 2: Add n numbers

## Now, write a function that takes in an arbitrary number of arguments and returns their sum
def my_sum(*numbs):
  sum = 0
  for num in numbs:
     sum += num
  return sum
print(my_sum(2, 3, 4, 5))
print(my_sum(2, 3, 40, 50))

### Problem 3: Factorial of a number

# I'm sure you must have heard of factorials. Mathematically, they're defined as follows:

# ```
# n! = n x (n-1) x (n-2) x ... x 2 x 1
# ```

def fact(n):
  if n < 0:
    return "Factorial doesn't exist!"
  elif n == 0:
    return "Factorial 0 = 1"
  else:
   multiply = 1
   for i in range(1, n+1):
    multiply = multiply*i
  return multiply

print(fact(-2))
print(fact(0))
print(fact(5))
Take_Input = int(input())
print(fact(Take_Input))

from os import F_LOCK
### Problem 4: Temperature converter

# Write a function that converts celsius to fahrenheit, and vice versa.

# The formulae are as follows:
# - Fahrenheit to Celsius: (F - 32) * 5/9
# - Celsius to Fahrenheit: (C * 9/5) + 32

# Your function should take 2 arguments: a temperature and the scale the temperature needs to be converted to.

# For instance, `my_func(100, 'F')` would assume that 100 is in Celsius and would convert it to 212F (in other words, it would return 212).
#  On the other hand `my_func(100, 'C')` would assume 100 is in Fahrenheir and would convert it to 37.7C.

# You can assume that the second argument of your function will always be either `C` or `F`.

def my_func(n, s):
  if s == "F":
    return ((n - 32) * (5 / 9))
  elif s == "C":
    return ((n * (9 / 5)) + 32)
  else:
    return "Input Correct Scale"

print(my_func(100, "C"))

take_values, F_C = float(input()), str(input())
print(my_func(take_values, F_C))

### Problem 5: List Manipulation

# Write a function that takes in a list of numbers as input and performs the following operations sequentially:
# - Remove all odd numbers
# - Double every remaining number
# - Sum all the modified numbers

# There is one caveat here though: you're not allowed to use loops! If you feel like you don't know how to proceed,
# maybe googling *List Comprehension in Python* might help :)

# As an example, `my_func([1, 2, 3, 4, 5])` would remove all odd numbers to create `[2, 4]`,
# double the numbers to create `[4, 8]` and then return a final answer of `12`.

def my_def(list1):
  even = filter(lambda x: x % 2 == 0, list1)
  double = map(lambda x: x*2, even)
  total = sum(double)
  return total

list1 = [2, 4, 7, 6, 67, 23, 8]
print(my_def(list1))

### Problem 6: Patterns I

# Write a function that takes in a number, and prints out a pattern.
# If the number is 1, you should print out:
# ```
# *
# ```
# If it's 2, you should print out,
# ```
# *
# **
# ```
# If it's 5, the result should be
# ```
# *
# **
# ***
# ****
# *****
# ```
# And so on.

def my_fun(n):
  for i in range(1, n+1, 1):
    print("*"*i)

my_fun(5)

### Problem 7: Patterns II

# Write a function that creates the mirror image of the pattern created in the last problem.

# The pattern when n=1 remains the same.

# For n=2,

# ```
#  *
# **
# ```

# For n=5,

# ```
#     *
#    **
#   ***
#  ****
# *****
# ```

# And so on.

def my_func(n):
  for i in range(n+1, 0, -1):
    print("*"*i)

my_func(5)

### Problem 8: Word Frequency

# Write a function that takes in a string as a function and returns a dictionary of alphabet frequency in the string.
# Your function should ignore all characters apart from English uppercase and lowercase alphabets.